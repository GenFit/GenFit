# Create a library called "libgfrave" which includes the source files given in
# the array .
# The extension is already found.  Any number of sources could be listed here.

cmake_minimum_required(VERSION 2.6)

IF(NOT DEFINED ENV{RAVEPATH})
   MESSAGE(FATAL_ERROR "You did not define the environment variable RAVEPATH which is nedded to find rave. Please set this variable and execute cmake again.") 
ENDIF(NOT DEFINED ENV{RAVEPATH})

#check for ENV variables that are needed
IF(NOT DEFINED ENV{ROOTSYS})
   MESSAGE(FATAL_ERROR "You did not set the environment variable ROOTSYS. Please check your ROOT configuration.") 
ENDIF(NOT DEFINED ENV{ROOTSYS})
#IF(NOT DEFINED ENV{GENFIT})
#   MESSAGE(FATAL_ERROR "You did not set the environment variable GENFIT.") 
#ENDIF(NOT DEFINED ENV{GENFIT})

SET(RAVEPATH $ENV{RAVEPATH})

# get compiler flags from rave
SET(ENV{PKG_CONFIG_PATH} ${RAVEPATH})
INCLUDE(FindPkgConfig)
pkg_check_modules(RAVE REQUIRED rave)
foreach(flag ${RAVE_CFLAGS})
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}") 
endforeach(flag)
MESSAGE("CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS})


set(INCLUDE_DIRECTORIES
${ROOT_INCLUDE_DIR}
${CLHEP_INCLUDE_DIR}
${CMAKE_SOURCE_DIR}/genfit
${CMAKE_SOURCE_DIR}/GenfitTools/GFRave
${RAVEPATH}/include 
${RAVEPATH}/src
${RAVEPATH}/src/ROOT/mathcore
${RAVEPATH}/src/ROOT/smatrix
${RAVEPATH}/src/ROOT/genvector
${RAVEPATH}/src/ROOT
${RAVEPATH}/src/RaveBase/RaveInterface
)

include_directories( ${INCLUDE_DIRECTORIES})

set(LINK_DIRECTORIES
${ROOT_LIBRARY_DIR}
)

link_directories( ${LINK_DIRECTORIES})


set(GFRAVE_SRCS 
GFRaveVertexFactory.cxx
GFRaveTrackParameters.cxx
GFRaveVertex.cxx
GFRaveConverters.cxx  
GFRavePropagator.cxx  
GFRaveMagneticField.cxx  
)

if(RULE_CHECKER_FOUND)
  CHECK_RULES("${GFRAVE_SRCS}" "${INCLUDE_DIRECTORIES}" GFRAVE_RULES)
endif(RULE_CHECKER_FOUND)

# fill list of header files from list of source files
# by exchanging the file extension
CHANGE_FILE_EXTENSION(*.cxx *.h GFRAVE_HEADERS "${GFRAVE_SRCS}")

set(GFRAVE_LINKDEF  GFRaveLinkDef.h)
set(GFRAVE_DICTIONARY ${CMAKE_CURRENT_BINARY_DIR}/GFRaveDict.cxx) 

ROOT_GENERATE_DICTIONARY("${GFRAVE_HEADERS}" "${GFRAVE_LINKDEF}" "${GFRAVE_DICTIONARY}" "${INCLUDE_DIRECTORIES}")

SET(GFRAVE_SRCS_ALL ${GFRAVE_SRCS} ${GFRAVE_DICTIONARY})

add_library(gfrave SHARED ${GFRAVE_SRCS_ALL})
target_link_libraries(gfrave ${ROOT_LIBRARIES})
set_target_properties(gfrave PROPERTIES ${FAIRROOT_LIBRARY_PROPERTIES})
################ install ###################
install(TARGETS gfrave DESTINATION ${CMAKE_BINARY_DIR}/lib)
